// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const addBetaLicence = `-- name: AddBetaLicence :one
INSERT INTO licences (user_id, licence_type, expiry)
VALUES ($1, 'beta', NOW() + INTERVAL '60 days')
RETURNING licence_key, expiry
`

type AddBetaLicenceRow struct {
	LicenceKey string
	Expiry     sql.NullTime
}

func (q *Queries) AddBetaLicence(ctx context.Context, userID uuid.UUID) (AddBetaLicenceRow, error) {
	row := q.db.QueryRowContext(ctx, addBetaLicence, userID)
	var i AddBetaLicenceRow
	err := row.Scan(&i.LicenceKey, &i.Expiry)
	return i, err
}

const addNewReleaseData = `-- name: AddNewReleaseData :exec
INSERT INTO app_releases (
  platform, 
  architecture,
  release_version,
  url_filename,
  file_size,
  release_date,
  is_latest,
  release_notes
  ) 
VALUES ($1, $2, $3, $4, $5, $6, TRUE, $7)
`

type AddNewReleaseDataParams struct {
	Platform       string
	Architecture   sql.NullString
	ReleaseVersion string
	UrlFilename    string
	FileSize       sql.NullInt64
	ReleaseDate    sql.NullTime
	ReleaseNotes   sql.NullString
}

func (q *Queries) AddNewReleaseData(ctx context.Context, arg AddNewReleaseDataParams) error {
	_, err := q.db.ExecContext(ctx, addNewReleaseData,
		arg.Platform,
		arg.Architecture,
		arg.ReleaseVersion,
		arg.UrlFilename,
		arg.FileSize,
		arg.ReleaseDate,
		arg.ReleaseNotes,
	)
	return err
}

const addTrialLicence = `-- name: AddTrialLicence :one
INSERT INTO licences (user_id, machine_id, licence_type, expiry)
VALUES ($1, $2, 'trial', NOW() + INTERVAL '14 days')
RETURNING licence_key, expiry
`

type AddTrialLicenceParams struct {
	UserID    uuid.UUID
	MachineID sql.NullString
}

type AddTrialLicenceRow struct {
	LicenceKey string
	Expiry     sql.NullTime
}

func (q *Queries) AddTrialLicence(ctx context.Context, arg AddTrialLicenceParams) (AddTrialLicenceRow, error) {
	row := q.db.QueryRowContext(ctx, addTrialLicence, arg.UserID, arg.MachineID)
	var i AddTrialLicenceRow
	err := row.Scan(&i.LicenceKey, &i.Expiry)
	return i, err
}

const changeJTI = `-- name: ChangeJTI :exec
UPDATE licences
SET jti = $1
WHERE licence_key = $2
`

type ChangeJTIParams struct {
	Jti        uuid.NullUUID
	LicenceKey string
}

func (q *Queries) ChangeJTI(ctx context.Context, arg ChangeJTIParams) error {
	_, err := q.db.ExecContext(ctx, changeJTI, arg.Jti, arg.LicenceKey)
	return err
}

const changeMachineIDAndJTI = `-- name: ChangeMachineIDAndJTI :exec
UPDATE licences
SET machine_id = $2, jti = $3
WHERE licence_key = $1
`

type ChangeMachineIDAndJTIParams struct {
	LicenceKey string
	MachineID  sql.NullString
	Jti        uuid.NullUUID
}

func (q *Queries) ChangeMachineIDAndJTI(ctx context.Context, arg ChangeMachineIDAndJTIParams) error {
	_, err := q.db.ExecContext(ctx, changeMachineIDAndJTI, arg.LicenceKey, arg.MachineID, arg.Jti)
	return err
}

const getAllLicencesFromUserID = `-- name: GetAllLicencesFromUserID :many
SELECT licence_key, user_id, machine_id, created_at, last_used_at, licence_type, expiry, jti FROM licences
WHERE user_id = $1
`

func (q *Queries) GetAllLicencesFromUserID(ctx context.Context, userID uuid.UUID) ([]Licence, error) {
	rows, err := q.db.QueryContext(ctx, getAllLicencesFromUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Licence
	for rows.Next() {
		var i Licence
		if err := rows.Scan(
			&i.LicenceKey,
			&i.UserID,
			&i.MachineID,
			&i.CreatedAt,
			&i.LastUsedAt,
			&i.LicenceType,
			&i.Expiry,
			&i.Jti,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBetaEmail = `-- name: GetBetaEmail :one
SELECT email, seen, name FROM beta_licences
WHERE email = $1
`

func (q *Queries) GetBetaEmail(ctx context.Context, email sql.NullString) (BetaLicence, error) {
	row := q.db.QueryRowContext(ctx, getBetaEmail, email)
	var i BetaLicence
	err := row.Scan(&i.Email, &i.Seen, &i.Name)
	return i, err
}

const getLatestBinary = `-- name: GetLatestBinary :one
SELECT id, platform, architecture, release_version, url_filename, file_size, release_date, is_latest, release_notes, created_at FROM app_releases
WHERE is_latest = TRUE
  AND architecture = $1
  AND platform = $2
LIMIT 1
`

type GetLatestBinaryParams struct {
	Architecture sql.NullString
	Platform     string
}

func (q *Queries) GetLatestBinary(ctx context.Context, arg GetLatestBinaryParams) (AppRelease, error) {
	row := q.db.QueryRowContext(ctx, getLatestBinary, arg.Architecture, arg.Platform)
	var i AppRelease
	err := row.Scan(
		&i.ID,
		&i.Platform,
		&i.Architecture,
		&i.ReleaseVersion,
		&i.UrlFilename,
		&i.FileSize,
		&i.ReleaseDate,
		&i.IsLatest,
		&i.ReleaseNotes,
		&i.CreatedAt,
	)
	return i, err
}

const getLicence = `-- name: GetLicence :one
SELECT licence_key, user_id, machine_id, created_at, last_used_at, licence_type, expiry, jti FROM licences
WHERE licence_key = $1 LIMIT 1
`

func (q *Queries) GetLicence(ctx context.Context, licenceKey string) (Licence, error) {
	row := q.db.QueryRowContext(ctx, getLicence, licenceKey)
	var i Licence
	err := row.Scan(
		&i.LicenceKey,
		&i.UserID,
		&i.MachineID,
		&i.CreatedAt,
		&i.LastUsedAt,
		&i.LicenceType,
		&i.Expiry,
		&i.Jti,
	)
	return i, err
}

const getNameFromBetaList = `-- name: GetNameFromBetaList :one
SELECT name FROM beta_licences
WHERE email = $1
`

func (q *Queries) GetNameFromBetaList(ctx context.Context, email sql.NullString) (sql.NullString, error) {
	row := q.db.QueryRowContext(ctx, getNameFromBetaList, email)
	var name sql.NullString
	err := row.Scan(&name)
	return name, err
}

const getUser = `-- name: GetUser :one
SELECT email, has_license, created_at, number_of_licenses, subscribed_to_emails, full_name, id FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.Email,
		&i.HasLicense,
		&i.CreatedAt,
		&i.NumberOfLicenses,
		&i.SubscribedToEmails,
		&i.FullName,
		&i.ID,
	)
	return i, err
}

const getUserFromEmail = `-- name: GetUserFromEmail :one
SELECT email, has_license, created_at, number_of_licenses, subscribed_to_emails, full_name, id FROM users
WHERE email = $1 LIMIT 1
`

func (q *Queries) GetUserFromEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserFromEmail, email)
	var i User
	err := row.Scan(
		&i.Email,
		&i.HasLicense,
		&i.CreatedAt,
		&i.NumberOfLicenses,
		&i.SubscribedToEmails,
		&i.FullName,
		&i.ID,
	)
	return i, err
}

const insertUser = `-- name: InsertUser :exec
INSERT INTO users (id, email, full_name, has_license, subscribed_to_emails) 
VALUES ($1, $2, $3, $4, $5)
RETURNING id
`

type InsertUserParams struct {
	ID                 uuid.UUID
	Email              string
	FullName           string
	HasLicense         bool
	SubscribedToEmails bool
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) error {
	_, err := q.db.ExecContext(ctx, insertUser,
		arg.ID,
		arg.Email,
		arg.FullName,
		arg.HasLicense,
		arg.SubscribedToEmails,
	)
	return err
}

const removeMachineID = `-- name: RemoveMachineID :exec
UPDATE licences
SET machine_id = null
WHERE licence_key = $1
`

func (q *Queries) RemoveMachineID(ctx context.Context, licenceKey string) error {
	_, err := q.db.ExecContext(ctx, removeMachineID, licenceKey)
	return err
}

const setBetaRowToSeen = `-- name: SetBetaRowToSeen :exec
UPDATE beta_licences
SET seen = true
WHERE email = $1
`

func (q *Queries) SetBetaRowToSeen(ctx context.Context, email sql.NullString) error {
	_, err := q.db.ExecContext(ctx, setBetaRowToSeen, email)
	return err
}

const unsetIsLatest = `-- name: UnsetIsLatest :exec
UPDATE app_releases 
SET is_latest = FALSE 
WHERE platform = $1 
  AND architecture = $2 
  AND is_latest = TRUE
`

type UnsetIsLatestParams struct {
	Platform     string
	Architecture sql.NullString
}

func (q *Queries) UnsetIsLatest(ctx context.Context, arg UnsetIsLatestParams) error {
	_, err := q.db.ExecContext(ctx, unsetIsLatest, arg.Platform, arg.Architecture)
	return err
}

const updateUserId = `-- name: UpdateUserId :exec
UPDATE users
SET id = $1
WHERE email = $2
`

type UpdateUserIdParams struct {
	ID    uuid.UUID
	Email string
}

func (q *Queries) UpdateUserId(ctx context.Context, arg UpdateUserIdParams) error {
	_, err := q.db.ExecContext(ctx, updateUserId, arg.ID, arg.Email)
	return err
}
