// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const addBetaLicence = `-- name: AddBetaLicence :one
INSERT INTO licences (user_id, licence_type, expiry)
VALUES ($1, 'beta', NOW() + INTERVAL '60 days')
RETURNING licence_key, expiry
`

type AddBetaLicenceRow struct {
	LicenceKey string
	Expiry     sql.NullTime
}

func (q *Queries) AddBetaLicence(ctx context.Context, userID uuid.UUID) (AddBetaLicenceRow, error) {
	row := q.db.QueryRowContext(ctx, addBetaLicence, userID)
	var i AddBetaLicenceRow
	err := row.Scan(&i.LicenceKey, &i.Expiry)
	return i, err
}

const addTrialLicence = `-- name: AddTrialLicence :one
INSERT INTO licences (user_id, machine_id, licence_type, expiry)
VALUES ($1, $2, 'trial', NOW() + INTERVAL '14 days')
RETURNING licence_key, expiry
`

type AddTrialLicenceParams struct {
	UserID    uuid.UUID
	MachineID sql.NullString
}

type AddTrialLicenceRow struct {
	LicenceKey string
	Expiry     sql.NullTime
}

func (q *Queries) AddTrialLicence(ctx context.Context, arg AddTrialLicenceParams) (AddTrialLicenceRow, error) {
	row := q.db.QueryRowContext(ctx, addTrialLicence, arg.UserID, arg.MachineID)
	var i AddTrialLicenceRow
	err := row.Scan(&i.LicenceKey, &i.Expiry)
	return i, err
}

const changeMachineID = `-- name: ChangeMachineID :exec
UPDATE licences
SET machine_id = $2
WHERE licence_key = $1
`

type ChangeMachineIDParams struct {
	LicenceKey string
	MachineID  sql.NullString
}

func (q *Queries) ChangeMachineID(ctx context.Context, arg ChangeMachineIDParams) error {
	_, err := q.db.ExecContext(ctx, changeMachineID, arg.LicenceKey, arg.MachineID)
	return err
}

const getBetaEmail = `-- name: GetBetaEmail :one
SELECT email, seen FROM beta_licences
WHERE email = $1
`

func (q *Queries) GetBetaEmail(ctx context.Context, email sql.NullString) (BetaLicence, error) {
	row := q.db.QueryRowContext(ctx, getBetaEmail, email)
	var i BetaLicence
	err := row.Scan(&i.Email, &i.Seen)
	return i, err
}

const getLicence = `-- name: GetLicence :one
SELECT licence_key, user_id, machine_id, created_at, last_used_at, licence_type, expiry FROM licences
where licence_key = $1 LIMIT 1
`

func (q *Queries) GetLicence(ctx context.Context, licenceKey string) (Licence, error) {
	row := q.db.QueryRowContext(ctx, getLicence, licenceKey)
	var i Licence
	err := row.Scan(
		&i.LicenceKey,
		&i.UserID,
		&i.MachineID,
		&i.CreatedAt,
		&i.LastUsedAt,
		&i.LicenceType,
		&i.Expiry,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT email, has_license, created_at, number_of_licenses, subscribed_to_emails, full_name, id FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.Email,
		&i.HasLicense,
		&i.CreatedAt,
		&i.NumberOfLicenses,
		&i.SubscribedToEmails,
		&i.FullName,
		&i.ID,
	)
	return i, err
}

const insertUser = `-- name: InsertUser :exec
INSERT INTO users (id, email, full_name, has_license, subscribed_to_emails) 
VALUES ($1, $2, $3, $4, $5)
RETURNING id
`

type InsertUserParams struct {
	ID                 uuid.UUID
	Email              string
	FullName           string
	HasLicense         bool
	SubscribedToEmails bool
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) error {
	_, err := q.db.ExecContext(ctx, insertUser,
		arg.ID,
		arg.Email,
		arg.FullName,
		arg.HasLicense,
		arg.SubscribedToEmails,
	)
	return err
}

const removeMachineID = `-- name: RemoveMachineID :exec
UPDATE licences
SET machine_id = null
WHERE licence_key = $1
`

func (q *Queries) RemoveMachineID(ctx context.Context, licenceKey string) error {
	_, err := q.db.ExecContext(ctx, removeMachineID, licenceKey)
	return err
}

const setBetaRowToSeen = `-- name: SetBetaRowToSeen :exec
UPDATE beta_licences
SET seen = true
WHERE email = $1
`

func (q *Queries) SetBetaRowToSeen(ctx context.Context, email sql.NullString) error {
	_, err := q.db.ExecContext(ctx, setBetaRowToSeen, email)
	return err
}

const updateUserId = `-- name: UpdateUserId :exec
UPDATE users
SET id = $1
WHERE email = $2
`

type UpdateUserIdParams struct {
	ID    uuid.UUID
	Email string
}

func (q *Queries) UpdateUserId(ctx context.Context, arg UpdateUserIdParams) error {
	_, err := q.db.ExecContext(ctx, updateUserId, arg.ID, arg.Email)
	return err
}
