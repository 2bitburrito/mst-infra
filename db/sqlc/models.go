// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package database

import (
	"database/sql"
	"database/sql/driver"
	"fmt"

	"github.com/google/uuid"
)

type LicenceTypeEnum string

const (
	LicenceTypeEnumTrial LicenceTypeEnum = "trial"
	LicenceTypeEnumPaid  LicenceTypeEnum = "paid"
	LicenceTypeEnumBeta  LicenceTypeEnum = "beta"
)

func (e *LicenceTypeEnum) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = LicenceTypeEnum(s)
	case string:
		*e = LicenceTypeEnum(s)
	default:
		return fmt.Errorf("unsupported scan type for LicenceTypeEnum: %T", src)
	}
	return nil
}

type NullLicenceTypeEnum struct {
	LicenceTypeEnum LicenceTypeEnum
	Valid           bool // Valid is true if LicenceTypeEnum is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullLicenceTypeEnum) Scan(value interface{}) error {
	if value == nil {
		ns.LicenceTypeEnum, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.LicenceTypeEnum.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullLicenceTypeEnum) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.LicenceTypeEnum), nil
}

type BetaLicence struct {
	Email sql.NullString
	Seen  bool
}

type Licence struct {
	LicenceKey  string
	UserID      uuid.UUID
	MachineID   sql.NullString
	CreatedAt   sql.NullTime
	LastUsedAt  sql.NullTime
	LicenceType NullLicenceTypeEnum
	Expiry      sql.NullTime
}

type User struct {
	Email              string
	HasLicense         bool
	CreatedAt          sql.NullTime
	NumberOfLicenses   int32
	SubscribedToEmails bool
	FullName           string
	ID                 uuid.UUID
}
